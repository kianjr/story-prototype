<h1>Editing Entity</h1>

<svg viewBox="-50 -50 100 100" class="edit">
  <rect id="background" width="100" height="100" x="-50" y="-50" fill="#0000"></rect>
  <g id="layers"></g>
</svg>

<button onclick="addShape('circle')">Add Circle</button>
<button onclick="addShape('square')">Add Square</button>
<button onclick="addShape('triangle')">Add Triangle</button>
<button onclick="addShape('diamond')">Add Diamond</button>

<button class="requireSelection" onclick="resizeShape(1.2)">Resize +</button>
<button class="requireSelection" onclick="resizeShape(0.8)">Resize -</button>
<button class="requireSelection" onclick="removeShape()">Remove Shape</button>
<button class="requireSelection" onclick="rotateShape()">Rotate CW</button>

<script>
  var width = d3.select("body").node().getBoundingClientRect().width
  var data = JSON.parse(<%= raw @entity.json.to_json %>)
  var key = 0
  var selectedShape= null

  //apply keys to each shape
  data.layers.forEach((layer) => {
      layer.shapes.forEach((shape) => {
          shape.key = key++
        })
    })

  var svg = d3.select("svg")
    .attr("height", width)
    .attr("width", width)

  var bg = d3.select("#background")
    .on("click", () => deselectShapes())

  function updateLayers(){
      var layers = d3.select("#layers")
        .selectAll('g')
        .data(data.layers)
        .join('g')

      var shapes = layers
        .selectAll('path')
        .data((d) => d.shapes)
        .join('path')
        .attr("d", (d) => d.path)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) scale(${d.scale}) rotate(${d.rotate || 0})`)
        .on("click", selectShape)
        .call(d3.drag()
            .on("start", selectShape)
            .on("drag", dragged)
            .on("end", dragEnd))
    }

  updateLayers()

  function dragged(event, d) {
      // Update the position with the delta x and y applied by the drag:
      d.x += event.dx;
      d.y += event.dy;
      d3.select(this)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) scale(${d.scale}) rotate(${d.rotate || 0})`)
        .classed("selected", true)
    }

  function dragEnd(event, d) {
      updateJSON()
    }

  function addShape(shape) {
      const shapes = {
          circle:  d3.symbol(d3.symbolCircle)(),
          square:  d3.symbol(d3.symbolSquare)(),
          triangle: d3.symbol(d3.symbolTriangle)(),
          diamond: d3.symbol(d3.symbolDiamond)()
        }
      data.layers[0].shapes.push({ path: shapes[shape], scale: 1, x: 0, y: 0, rotate: 0})
      updateLayers()
      updateJSON()
    }

  function selectShape(event, d){
      if (selectedShape) { selectedShape.classed("selected",false) }
      selectedShape = d3.select(this)
      selectedShape.classed("selected", true)
      updateButtons()
    }

  function deselectShapes(){
      if (selectedShape) { selectedShape.classed("selected",false) }
      selectedShape = null
      updateButtons()
    }

  function removeShape() {
      selectedShape.classed("selected", false)
      data.layers = data.layers.map((layer) => {
          return {
              shapes: layer.shapes.filter((shape) => shape.key !== selectedShape.datum().key)
            }
        })
      selectedShape = null;
      updateLayers()
      updateButtons()
      updateJSON()
    }

  function resizeShape(factor) {
      selectedShape.datum().scale *= factor
      updateLayers()
      updateJSON()
    }

  function rotateShape(factor) {
      selectedShape.datum().rotate += 15 
      updateLayers()
      updateJSON()
    }

  function updateButtons(){
      d3.selectAll("button.requireSelection")
        .attr("disabled", !selectedShape || null)
    }
  updateButtons()

  function updateJSON(){
      byId("entity_json").value = JSON.stringify(data)
    }

</script>

<%= render 'form', entity: @entity %>

<%= link_to 'Show', @entity %> |
<%= link_to 'Back', entities_path %>
