<h1>Editing Entity</h1>

<svg viewBox="-50 -50 100 100" class="edit">
  <g id="layers"></g>
</svg>

<button onclick="addShape()">Add Shape</button>
<button class="requireSelection" onclick="removeShape()">Remove Shape</button>

<script>
  var width = d3.select("body").node().getBoundingClientRect().width
  var data = JSON.parse(<%= raw @entity.json.to_json %>)
  var key = 0
  var selectedShape= null

  //apply keys to each shape
  data.layers.forEach((layer) => {
      layer.shapes.forEach((shape) => {
          shape.key = key++
        })
    })

  var svg = d3.select("svg")
    .attr("height", width)
    .attr("width", width)

  function updateLayers(){
      var layers = d3.select("#layers")
        .selectAll('g')
        .data(data.layers)
        .join('g')

      var shapes = layers
        .selectAll('path')
        .data((d) => d.shapes)
        .join('path')
        .attr("d", (d) => d.path)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) scale(${d.scale})`)
        .on("click", selectShape)
        .call(d3.drag()
            .on("start", selectShape)
            .on("drag", dragged)
            .on("end", dragEnd))
    }

  updateLayers()

  function dragged(event, d) {
      // Update the position with the delta x and y applied by the drag:
      d.x += event.dx;
      d.y += event.dy;
      d3.select(this)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) scale(${d.scale})`)
        .classed("selected", true)
    }

  function dragEnd(event, d) {
      updateJSON()
    }

  function addShape() {
      const circlePath = "M4.51351666838205,0A4.51351666838205,4.51351666838205,0,1,1,-4.51351666838205,0A4.51351666838205,4.51351666838205,0,1,1,4.51351666838205,0"
      data.layers[0].shapes.push({ path: circlePath, scale: 1, x: 0, y: 0})
      updateLayers()
      updateJSON()
    }

  function selectShape(event, d){
      if (selectedShape) { selectedShape.classed("selected",false) }
      selectedShape = d3.select(this)
      selectedShape.classed("selected", true)
      updateButtons()
    }

  function removeShape() {
      selectedShape.classed("selected", false)
      data.layers = data.layers.map((layer) => {
          return {
              shapes: layer.shapes.filter((shape) => shape.key !== selectedShape.datum().key)
            }
        })
      selectedShape = null;
      updateLayers()
      updateButtons()
      updateJSON()
    }

  function updateButtons(){
      d3.select("button.requireSelection")
      .attr("disabled", !selectedShape || null)
    }
  updateButtons()

  function updateJSON(){
      byId("entity_json").value = JSON.stringify(data)
    }

</script>

<%= render 'form', entity: @entity %>

<%= link_to 'Show', @entity %> |
<%= link_to 'Back', entities_path %>
