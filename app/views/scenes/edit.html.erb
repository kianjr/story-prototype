<h1>Editing Scene</h1>

<div class="svgContainer"></div>
<h2>Entities</h2>
<div class="entitySelectors"> </div>
<button onclick="addEntity()">Add Entity</button><br>
<button onclick="removeEntity(selectedEntityKey)">Remove Selected Entity</button><br>
<button onclick="startMoveMode(selectedEntity)">Move Selected Entity</button><br>
<button onclick="stopMoveMode()">Confirm Move</button><br>

<%= render 'form', scene: @scene %>


<%= link_to 'Show', @scene %> |
<%= link_to 'Back', scenes_path %>

<script>
  var width = d3.select("body").node().getBoundingClientRect().width
  var data = JSON.parse(<%= raw @scene.json.to_json %>)
  var key = 0;
  data.entities.forEach((entity) => entity.key = key++)
  var selectedEntityKey = null;
  var selectedEntity = null;

  var svg = d3.select(".svgContainer")
    .append("svg")
    .attr("height", width)
    .attr("width", width)
    .attr("viewBox", "0 0 100 100")

  function addEntitiesToDOM(){
      var svgEntities = svg.selectAll("path")
        .data(data.entities, (d) => d.key)
        .enter()
        .append("path")
        .attr("d", (d) => d.path)
        .attr("transform", (d) => `translate(${d.x} ${d.y})`)

      var entitySelectors = d3.select(".entitySelectors")
        .selectAll("button.entitySelector")
        .data(data.entities, (d) => d.key)
        .enter()
        .append("button")
        .attr("class", "entitySelector")
        .on("click", selectEntity )

      entitySelectors
        .append("svg")
        .attr("viewBox", "0 0 100 100")
        .attr("height", 60)
        .attr("width", 60)
        .append("path")
        .attr("d", (d) => d.path)

      entitySelectors
        .append("label")
        .text((d) => d.label )
    }

  function selectEntity(event, d) {
      selectedEntityKey = d.key
      selectedEntity = d3.select(".svgContainer")
        .selectAll("path")
        .filter((d) => d.key === selectedEntityKey) 

      d3.selectAll(".entitySelector").classed("active", false)
      d3.selectAll("path").classed("active", false)

      d3.select(this).classed("active", true)
      selectedEntity.classed("active", true)
    }

  function addEntity(){
      var newEntity = {
          id: 42,
          key: key++,
          label: "tree",
          path: "M13 24.003h-2v-4.083c-2.836-.477-5-2.946-5-5.917 0-1.562.022-1.226 5.076-13.385.016 0 .223-.615.924-.615.697 0 .909.613.925.613 4.656 11.172 5.075 11.546 5.075 13.387 0 2.971-2.164 5.44-5 5.917v4.083z",
          x: Math.random() * 100,
          y: Math.random() * 100
        }
      data.entities.push(newEntity)
      addEntitiesToDOM()

      updateJSON()

    }

  function removeEntity(key){
      var index = data.entities.findIndex((e) => e.key === key)
      data.entities.splice(index, 1)

      d3.select(".svgContainer")
        .selectAll("path")
        .data(data.entities, (d) => d.key)
        .exit()
        .remove()

      d3.selectAll("button.entitySelector")
        .data(data.entities, (d) => d.key)
        .exit()
        .remove()

      updateJSON()
    }

  function startMoveMode(selectedEntity){

      d3.select(".svgContainer").selectAll("path")
        .style("opacity", .5)

      selectedEntity
        .style("opacity", 1)
        .style("fill", 'blue')
        .call(d3.drag()
            .on("drag", dragged))
    }

  function dragged(event, d) {
      // Update the position with the delta x and y applied by the drag:
      d.x += event.dx;
      d.y += event.dy;
      d3.select(this)
        .attr("transform", (d) => `translate(${d.x} ${d.y})`)
    }

  function stopMoveMode(){
      d3.select(".svgContainer").selectAll("path")
        .style("opacity", 1)

      selectedEntity
        .style("fill", "black")
        .call(d3.drag().on("drag", null))

      updateJSON()
    }

  function updateJSON(){
      byId("scene_json").value = JSON.stringify(data)
    }

  addEntitiesToDOM()
</script>
