<h1>Editing Scene</h1>

<svg viewBox="0 0 100 100">
  <g id="entityGroup"></g>
</svg>
<h2>Entities</h2>
<div class="entitySelectors"> </div>
<button onclick="addEntity()">Add Entity</button><br>
<button onclick="removeEntity(selectedEntityKey)">Remove Selected Entity</button><br>

<%= render 'form', scene: @scene %>


<%= link_to 'Show', @scene %> |
<%= link_to 'Back', scenes_path %>

<script>
  var width = d3.select("body").node().getBoundingClientRect().width
  var data = JSON.parse(<%= raw @scene.json.to_json %>)
  var key = 0;

  data.entities.forEach((entity) => entity.key = key++)

  var selectedEntityKey = null;
  var selectedEntity = null;

  var svg = d3.select("svg")
    .attr("height", width)
    .attr("width", width)

  function addEntitiesToDOM(){
      var entities = d3.select("#entityGroup")
        .selectAll("g.entity")
        .data(data.entities)
        .enter()
        .append("g")
        .attr("class", "entity")
        .attr("transform", (d) => `translate(${d.x} ${d.y})`)
        .attr("id", (d) => d.key)
        .call(d3.drag()
            .on("drag", dragged)
            .on("end", dragEnd))
      console.log(entities)

      var layers = entities
        .selectAll("g.layer")
        .data((d) => d.layers)
        .enter()
        .append('g')
        .attr("class", "layer")

      var shapes = layers
        .selectAll('path')
        .data((d) => d.shapes)
        .enter()
        .append('path')
        .attr("d", (d) => d.path)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) scale(${d.scale})`)

      var entitySelectors = d3.select(".entitySelectors")
        .selectAll("button.entitySelector")
        .data(data.entities, (d) => d.key)
        .enter()
        .append("button")
        .attr("class", "entitySelector")
        .on("click", selectEntity )

      entitySelectors
        .append("svg")
        .attr("viewBox", "0 0 100 100")
        .attr("height", 60)
        .attr("width", 60)
        .append("path")
        .attr("d", (d) => d.path)

      entitySelectors
        .append("label")
        .text((d) => d.label )
    }

  function dragged(event, d) {
      console.log('foo')
      // Update the position with the delta x and y applied by the drag:
      d.x += event.dx;
      d.y += event.dy;
      d3.select(this)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) scale(${d.scale})`)
        .classed("dragging", true)
    }

  function dragEnd(event, d) {
      d3.select(this)
        .classed("dragging", false)
      updateJSON()
    }

  function selectEntity(event, d) {
      selectedEntityKey = d.key
      selectedEntity = d3.select(".svgContainer")
        .selectAll("path")
        .filter((d) => d.key === selectedEntityKey) 

      d3.selectAll(".entitySelector").classed("active", false)
      d3.selectAll("path").classed("active", false)

      d3.select(this).classed("active", true)
      selectedEntity.classed("active", true)
    }

  function addEntity(){
      var newEntity = JSON.parse(<%= raw @entities.first.json.to_json %>)
      newEntity.key = key++
      newEntity.x = 50;
      newEntity.y = 50;
      newEntity.scale = 1;
      data.entities.push(newEntity)
      addEntitiesToDOM()

      updateJSON()

    }

  function removeEntity(key){
      var index = data.entities.findIndex((e) => e.key === key)
      data.entities.splice(index, 1)

      d3.select(".svgContainer")
        .selectAll("path")
        .data(data.entities, (d) => d.key)
        .exit()
        .remove()

      d3.selectAll("button.entitySelector")
        .data(data.entities, (d) => d.key)
        .exit()
        .remove()

      updateJSON()
    }

  function updateJSON(){
      byId("scene_json").value = JSON.stringify(data)
    }

  addEntitiesToDOM()
</script>
