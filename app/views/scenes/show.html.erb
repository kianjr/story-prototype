<p id="notice"><%= notice %></p>

<svg viewBox="-50 -50 100 100" class="edit">
  <filter filterUnits="objectBoundingBox" primitiveUnits="userSpaceOnUse" id="layerOutline">
    <feMorphology operator="dilate" in="SourceAlpha" radius=".25" result="morph"/>
    <feComposite operator="atop" in="SourceGraphic" in2="morph" result ="outline"/>
  </filter>
  <rect id="background" width="100" height="100" x="-50" y="-50" fill="#0000"></rect>
  <g id="layers"></g>
</svg>

<script>
  var width = d3.select("body").node().getBoundingClientRect().width
  var data = JSON.parse(<%= raw @scene.json.to_json %>)

  var svg = d3.select("svg")
    .attr("height", width)
    .attr("width", width)

  function drawLayers(){
      var layers = d3.select("#layers")
        .selectAll('g.layer')
        .data(data.layers)
        .join('g')

      var entities = layers
        .selectAll('g.entity')
        .data((d) => d.entities)
        .join('g')
        .classed("entity", true)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) rotate(${d.rotate}) scale(${d.scaleX} ${d.scaleY})`)

      var entityLayers = entities
        .selectAll('g.entityLayer')
        .data((d) => d.entity.layers)
        .join('g')
        .classed("entityLayer", true)
        .attr("filter", "url(#layerOutline)")

      var enitityShapes = entityLayers
        .selectAll('path')
        .data((d) => d.shapes)
        .join('path')
        .classed("entityShape", true)
        .attr("d", (d) => d.path)
        .attr("transform", (d) => `translate(${d.x} ${d.y}) rotate(${d.rotate}) scale(${d.scaleX} ${d.scaleY})`)
    }

  drawLayers()

</script>

<p> 
<strong>Json:</strong>
<%= @scene.json %>
</p>

<%= link_to 'Edit', edit_scene_path(@scene) %> |
<%= link_to 'Back', scenes_path %>
